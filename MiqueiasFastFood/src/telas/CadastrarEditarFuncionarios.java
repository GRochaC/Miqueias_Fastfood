/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package telas;

import java.util.InputMismatchException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import miqueias_fast_food.CarregarFuncionario;
import miqueias_fast_food.Funcionario;

/**
 *
 * @author guilherme
 */
public class CadastrarEditarFuncionarios extends javax.swing.JFrame {
    
    boolean novo;
    
    /**
     * Creates new form CadastrarEditarFuncionarios
     */
    public CadastrarEditarFuncionarios() {
        
        initComponents();
        popularTabela();
        bCadastrar.setEnabled(true);
        bSalvar.setEnabled(false);
        bEditar.setEnabled(false);
        bExcluir.setEnabled(false);
        bVoltar.setEnabled(true);
        
        txtNome.setEnabled(false);
        ftxtCPF.setEnabled(false);
        txtLogin.setEnabled(false);
        pswSenha.setEnabled(false);
        pswConfirmarSenha.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCEFuncionarios = new javax.swing.JPanel();
        lbCabecalho = new javax.swing.JLabel();
        pnlInfoFun = new javax.swing.JPanel();
        lbNome = new javax.swing.JLabel();
        lbCPF = new javax.swing.JLabel();
        lbLogin = new javax.swing.JLabel();
        lbSenha = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        pswSenha = new javax.swing.JPasswordField();
        lbConfirmarSenha = new javax.swing.JLabel();
        pswConfirmarSenha = new javax.swing.JPasswordField();
        ftxtCPF = new javax.swing.JFormattedTextField();
        txtLogin = new javax.swing.JTextField();
        bCadastrar = new javax.swing.JButton();
        bSalvar = new javax.swing.JButton();
        bEditar = new javax.swing.JButton();
        bExcluir = new javax.swing.JButton();
        bVoltar = new javax.swing.JButton();
        scrPnlFuncionarios = new javax.swing.JScrollPane();
        tbFuncionarios = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbCabecalho.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/cabecalho.png"))); // NOI18N

        pnlInfoFun.setBackground(new java.awt.Color(244, 244, 244));
        pnlInfoFun.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Informações do Funcionário", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Liberation Sans", 3, 15))); // NOI18N

        lbNome.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        lbNome.setText("Nome:");

        lbCPF.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        lbCPF.setText("CPF:");

        lbLogin.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        lbLogin.setText("Login:");

        lbSenha.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        lbSenha.setText("Senha:");

        txtNome.setToolTipText("Campo obrigatório");

        pswSenha.setToolTipText("Campo obrigatório");

        lbConfirmarSenha.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        lbConfirmarSenha.setText("Confirmar senha:");

        pswConfirmarSenha.setToolTipText("Campo obrigatório");

        try {
            ftxtCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        ftxtCPF.setToolTipText("Campo obrigatório");

        txtLogin.setToolTipText("Campo obrigatório");

        bCadastrar.setText("Cadastrar");
        bCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCadastrarActionPerformed(evt);
            }
        });

        bSalvar.setText("Salvar");
        bSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSalvarActionPerformed(evt);
            }
        });

        bEditar.setText("Editar");
        bEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEditarActionPerformed(evt);
            }
        });

        bExcluir.setText("Excluir");
        bExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlInfoFunLayout = new javax.swing.GroupLayout(pnlInfoFun);
        pnlInfoFun.setLayout(pnlInfoFunLayout);
        pnlInfoFunLayout.setHorizontalGroup(
            pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoFunLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInfoFunLayout.createSequentialGroup()
                        .addComponent(lbConfirmarSenha)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pswConfirmarSenha))
                    .addGroup(pnlInfoFunLayout.createSequentialGroup()
                        .addGroup(pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbSenha)
                            .addComponent(lbLogin))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtLogin)
                            .addComponent(pswSenha)))
                    .addGroup(pnlInfoFunLayout.createSequentialGroup()
                        .addGroup(pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbNome)
                            .addComponent(lbCPF))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ftxtCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(58, 58, 58)
                .addGroup(pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bCadastrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(17, 17, 17))
        );
        pnlInfoFunLayout.setVerticalGroup(
            pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoFunLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInfoFunLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lbNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlInfoFunLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNome, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                            .addComponent(bCadastrar))))
                .addGap(6, 6, 6)
                .addGroup(pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInfoFunLayout.createSequentialGroup()
                        .addGroup(pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlInfoFunLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(ftxtCPF))
                            .addComponent(lbCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6))
                    .addComponent(bSalvar))
                .addGroup(pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInfoFunLayout.createSequentialGroup()
                        .addGroup(pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlInfoFunLayout.createSequentialGroup()
                                .addGroup(pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bEditar))
                                .addGap(6, 6, 6)
                                .addComponent(lbSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pswSenha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlInfoFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlInfoFunLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lbConfirmarSenha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnlInfoFunLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(pswConfirmarSenha)))
                        .addGap(24, 24, 24))
                    .addGroup(pnlInfoFunLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(bExcluir)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        bVoltar.setText("Voltar");
        bVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVoltarActionPerformed(evt);
            }
        });

        scrPnlFuncionarios.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Funcionários", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Liberation Sans", 3, 15))); // NOI18N

        tbFuncionarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "CPF", "Login", "Senha"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbFuncionarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbFuncionariosMouseClicked(evt);
            }
        });
        scrPnlFuncionarios.setViewportView(tbFuncionarios);

        javax.swing.GroupLayout pnlCEFuncionariosLayout = new javax.swing.GroupLayout(pnlCEFuncionarios);
        pnlCEFuncionarios.setLayout(pnlCEFuncionariosLayout);
        pnlCEFuncionariosLayout.setHorizontalGroup(
            pnlCEFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbCabecalho)
            .addGroup(pnlCEFuncionariosLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(pnlCEFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrPnlFuncionarios, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlInfoFun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(pnlCEFuncionariosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bVoltar))
        );
        pnlCEFuncionariosLayout.setVerticalGroup(
            pnlCEFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCEFuncionariosLayout.createSequentialGroup()
                .addComponent(lbCabecalho, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlInfoFun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scrPnlFuncionarios, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                .addGap(14, 14, 14)
                .addComponent(bVoltar)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCEFuncionarios, javax.swing.GroupLayout.PREFERRED_SIZE, 794, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCEFuncionarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void popularTabela(){
        /*
        este método popula a tabela tbFuncionarios 
        com os dados dos funcionarios presentes
        na arraylist de funcionarios
        */
            DefaultTableModel modelo = new DefaultTableModel(new Object[] {"Nome",
                                                                           "CPF",
                                                                           "Login",
                                                                           "Senha"
            }, 0);
            
            for(int i = 0; i<MenuPrincipal.funcionarios.size(); i++){
                Object row[] = new Object[]{
                    MenuPrincipal.funcionarios.get(i).getNome()
                    ,MenuPrincipal.funcionarios.get(i).getCpf()
                    ,MenuPrincipal.funcionarios.get(i).getLogin(),
                    MenuPrincipal.funcionarios.get(i).getSenha()
                };
                modelo.addRow(row);
            }
            
            tbFuncionarios.setModel(modelo);
    }
    private boolean validaForm(){
        /*
        este método é utilizado 
        para verificar se todos os campos foram
        preenchidos antes que os valores nele sejam atribuídos 
        à variáveis e processados
        */
        
        if(txtNome.getText().isEmpty() || ftxtCPF.getText().isEmpty() || txtLogin.getText().isEmpty() || pswSenha.getText().isEmpty() || pswConfirmarSenha.getText().isEmpty()){
            
            JOptionPane.showMessageDialog(null, "Preencha todos os campos", "Aviso", JOptionPane.INFORMATION_MESSAGE);

            return false;
        }
        if(!pswSenha.getText().equals(pswConfirmarSenha.getText())){
            JOptionPane.showMessageDialog(null, "Senhas não coincidem", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return true;
    }
    
    
    private boolean validaCPF(String CPF){
        
        /*
        este método valida um cpf
        informado de acordo com os critérios
        do governo federal
        */
        
        if (CPF.equals("00000000000") ||
            CPF.equals("11111111111") ||
            CPF.equals("22222222222") || CPF.equals("33333333333") ||
            CPF.equals("44444444444") || CPF.equals("55555555555") ||
            CPF.equals("66666666666") || CPF.equals("77777777777") ||
            CPF.equals("88888888888") || CPF.equals("99999999999") ||
            (CPF.length() != 11))
            return(false);

        char dig10, dig11;
        int sm, i, r, num, peso;

        // "try" - protege o codigo para eventuais erros de conversao de tipo (int)
        try {
        // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i=0; i<9; i++) {
        // converte o i-esimo caractere do CPF em um numero:
        // por exemplo, transforma o caractere '0' no inteiro 0
        // (48 eh a posicao de '0' na tabela ASCII)
            num = (int)(CPF.charAt(i) - 48);
            sm = sm + (num * peso);
            peso = peso - 1;
            }

            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else dig10 = (char)(r + 48); // converte no respectivo caractere numerico

        // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for(i=0; i<10; i++) {
            num = (int)(CPF.charAt(i) - 48);
            sm = sm + (num * peso);
            peso = peso - 1;
            }

            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                 dig11 = '0';
            else dig11 = (char)(r + 48);

        // Verifica se os digitos calculados conferem com os digitos informados.
            if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10)))
                 return(true);
            else return(false);
                } catch (InputMismatchException erro) {
                return(false);
            }
        }
    
    private boolean validaCadastro(String login, String senha, String cpf){
        
        /*
        este método valida um cadastro considerando 
        o login e a senha informados e o cpf.
        inicialmente, verifica-se se o login ou a senha são
        válidos, isto é, se não há no sistema funcionarios 
        com aquele login ou aquela senha. Verificado isto,
        o cpf fornecido é validado pelo métod validaCPF.
        */
        
        for(int i = 0; i<MenuPrincipal.funcionarios.size(); i++){
            if(MenuPrincipal.funcionarios.get(i).getLogin().equals(login) || MenuPrincipal.funcionarios.get(i).getSenha().equals(senha) ){
            JOptionPane.showMessageDialog(null, "Login ou senha inválidos", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            return false;
            }
        }
        
        
        if(!validaCPF(cpf)){
            JOptionPane.showMessageDialog(null, "CPF inválido", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    private void bSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSalvarActionPerformed
        boolean finished = false;
        /*
        este método inicia o processo de salvar os dados fornecidos levando 
        em conta a existência de valores nos campos do formulário, verificação
        feita pelo método validaForm, e a validade dos valores informados,
        verificação feita pelo método validaCadastro.
        Também é levado em conta se o que se quer é
        editar um cadastro já existente ou criar um novo,
        possibilidades que são controladas pela flag 'novo'.
        */
        
        if(validaForm()){
            String n = txtNome.getText();
            String cpf = ftxtCPF.getText();
            String l = txtLogin.getText();
            String p = pswConfirmarSenha.getText();
            
            Funcionario f = new Funcionario(n, cpf, l, p);
            
            
            if(novo && validaCadastro(l, p, cpf)){
               
               MenuPrincipal.funcionarios.add(f);
               CarregarFuncionario.RegistraFuncionario(l, p, cpf, n);
               JOptionPane.showMessageDialog(null, "Cadastro realizado com sucesso.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
               finished = true;
            }
            else if(!novo && validaCadastro(l, p, cpf)){
                int index = tbFuncionarios.getSelectedRow();
                
                String temp = MenuPrincipal.funcionarios.get(index).getLogin();
                
                CarregarFuncionario.EditarFuncionario(temp, l, p, cpf, n);
                MenuPrincipal.funcionarios.get(index).setCpf(cpf);
                MenuPrincipal.funcionarios.get(index).setNome(n);
                MenuPrincipal.funcionarios.get(index).setLogin(l);
                MenuPrincipal.funcionarios.get(index).setSenha(p);
                finished = true;
            }
            if(finished){
               bCadastrar.setEnabled(true);
               bSalvar.setEnabled(false);
               bEditar.setEnabled(false);
               bExcluir.setEnabled(false);
               bVoltar.setEnabled(true);
               
               txtNome.setText("");
               ftxtCPF.setText("");
               txtLogin.setText("");
               pswSenha.setText("");
               pswConfirmarSenha.setText("");
               
               txtNome.setEnabled(false);
               ftxtCPF.setEnabled(false);
               txtLogin.setEnabled(false);
               pswSenha.setEnabled(false);
               pswConfirmarSenha.setEnabled(false);
               popularTabela();
            }
        }
    }//GEN-LAST:event_bSalvarActionPerformed

    private void bCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCadastrarActionPerformed
        novo = true;
        bCadastrar.setEnabled(false);
        bSalvar.setEnabled(true);
        bEditar.setEnabled(false);
        bExcluir.setEnabled(false);
        bVoltar.setEnabled(true);
        
        txtNome.setEnabled(true);
        ftxtCPF.setEnabled(true);
        txtLogin.setEnabled(true);
        pswSenha.setEnabled(true);
        pswConfirmarSenha.setEnabled(true);
    }//GEN-LAST:event_bCadastrarActionPerformed

    private void tbFuncionariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbFuncionariosMouseClicked
        int i = tbFuncionarios.getSelectedRow();
        if(i >= 0 && i < MenuPrincipal.funcionarios.size()){
               Funcionario f = MenuPrincipal.funcionarios.get(i);
               
               
               bCadastrar.setEnabled(false);
               bSalvar.setEnabled(true);
               bEditar.setEnabled(true);
               bExcluir.setEnabled(true);
               bVoltar.setEnabled(true);
               
               txtNome.setText(f.getNome());
               ftxtCPF.setText(f.getCpf());
               txtLogin.setText(f.getLogin());
               pswSenha.setText(f.getSenha());
               pswConfirmarSenha.setText(f.getSenha());
               
               txtNome.setEnabled(false);
               ftxtCPF.setEnabled(false);
               txtLogin.setEnabled(false);
               pswSenha.setEnabled(false);
               pswConfirmarSenha.setEnabled(false);
        }
    }//GEN-LAST:event_tbFuncionariosMouseClicked

    private void bEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEditarActionPerformed
        novo = false;
        
        bCadastrar.setEnabled(false);
        bSalvar.setEnabled(true);
        bEditar.setEnabled(false);
        bExcluir.setEnabled(false);
        bVoltar.setEnabled(true);
        
        txtNome.setEnabled(true);
        ftxtCPF.setEnabled(true);
        txtLogin.setEnabled(true);
        pswSenha.setEnabled(true);
        pswConfirmarSenha.setEnabled(true);
    }//GEN-LAST:event_bEditarActionPerformed

    private void bExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExcluirActionPerformed
        int index = tbFuncionarios.getSelectedRow();
        
        if(index >= 0 && index < MenuPrincipal.funcionarios.size()){
            CarregarFuncionario.DeletarFuncionario(MenuPrincipal.funcionarios.get(index).getLogin());
            MenuPrincipal.funcionarios.remove(index);
            popularTabela();
        }
        
        bCadastrar.setEnabled(true);
        bSalvar.setEnabled(false);
        bEditar.setEnabled(false);
        bExcluir.setEnabled(false);
        bVoltar.setEnabled(true);
        
        txtNome.setText("");
        ftxtCPF.setText("");
        txtLogin.setText("");
        pswSenha.setText("");
        pswConfirmarSenha.setText("");
        
        txtNome.setEnabled(false);
        ftxtCPF.setEnabled(false);
        txtLogin.setEnabled(false);
        pswSenha.setEnabled(false);
        pswConfirmarSenha.setEnabled(false);
        
    }//GEN-LAST:event_bExcluirActionPerformed

    private void bVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVoltarActionPerformed
        new TelaFuncionario().setVisible(true);
    }//GEN-LAST:event_bVoltarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastrarEditarFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastrarEditarFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastrarEditarFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastrarEditarFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastrarEditarFuncionarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCadastrar;
    private javax.swing.JButton bEditar;
    private javax.swing.JButton bExcluir;
    private javax.swing.JButton bSalvar;
    private javax.swing.JButton bVoltar;
    private javax.swing.JFormattedTextField ftxtCPF;
    private javax.swing.JLabel lbCPF;
    private javax.swing.JLabel lbCabecalho;
    private javax.swing.JLabel lbConfirmarSenha;
    private javax.swing.JLabel lbLogin;
    private javax.swing.JLabel lbNome;
    private javax.swing.JLabel lbSenha;
    private javax.swing.JPanel pnlCEFuncionarios;
    private javax.swing.JPanel pnlInfoFun;
    private javax.swing.JPasswordField pswConfirmarSenha;
    private javax.swing.JPasswordField pswSenha;
    private javax.swing.JScrollPane scrPnlFuncionarios;
    private javax.swing.JTable tbFuncionarios;
    private javax.swing.JTextField txtLogin;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables
}
